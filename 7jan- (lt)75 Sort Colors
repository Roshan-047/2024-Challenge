75. Sort Colors
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

hashmap approach

class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        map<int, int> mp;
        for(int i = 0;i<nums.size();i++){
            if(mp.find(nums[i])!= mp.end()){
                mp[nums[i]]++;
            }
            if(mp.find(nums[i])==mp.end()){
                mp[nums[i]]=1;
            }
        }
        int l = 0;
        for(int i = 0;i<mp.size();i++){
            while(mp[i]>0){
                nums[l] = i;
                l++;
                mp[i]--;
            }

        }
        
    }
};

//using dutch national flag problem approach, this approach only works when there are only 3 distinct elements in the array
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0, mid = 0, high= nums.size()-1;
        while(mid<=high){
            if(nums[mid] == 1) mid++;
            else if(nums[mid] == 0 ) {
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else{
                swap(nums[mid],nums[high]);
                high--;
                
            }
        }
    }
};

