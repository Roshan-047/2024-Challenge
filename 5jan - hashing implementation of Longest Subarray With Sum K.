Problem statement
Ninja and his friend are playing a game of subarrays. They have an array ‘NUMS’ of length ‘N’. Ninja’s friend gives him an arbitrary integer ‘K’ and asks him to find the length of the longest subarray in which the sum of elements is equal to ‘K’.

Ninjas asks for your help to win this game. Find the length of the longest subarray in which the sum of elements is equal to ‘K’.

If there is no subarray whose sum is ‘K’ then you should return 0.

Example:
Input: ‘N’ = 5,  ‘K’ = 4, ‘NUMS’ = [ 1, 2, 1, 0, 1 ]

Output: 4

There are two subarrays with sum = 4, [1, 2, 1] and [2, 1, 0, 1]. Hence the length of the longest subarray with sum = 4 is 4.

#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& nums, int k){
    // Write your code here
    map<int,int> prefix_sum;
    int sum = 0;
    int ans = 0;
    for(int i = 0; i<nums.size();i++){
        sum+=nums[i];
        if(sum == k){
            ans = max(ans, i+1);
        }
        int rem = sum - k;
        if(prefix_sum.find(rem) != prefix_sum.end()){
            ans = max(ans, i-prefix_sum[rem]);
        }
        if(prefix_sum.find(sum)==prefix_sum.end()){
            prefix_sum[sum] = i;
        }

        }
        return ans;
    }


if the values are only positive then the optimal solution will be using two pointer approach
here we are sliding the window if the sum exceeds the k then we subtract leftmost element till the sum is 
greater than k. 

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int right = 0, left = 0;
    long long sum = a[0];
    int maxlen = 0;
    while(right<a.size()){
        while(left<=right && sum>k){
            sum -= a[left];
            left++;
        }
        if(sum == k){
            maxlen = max(maxlen, right-left+1);
        }
        right++;
        if(right<a.size()) sum+=a[right];
         
        
    }
    return maxlen;
}
