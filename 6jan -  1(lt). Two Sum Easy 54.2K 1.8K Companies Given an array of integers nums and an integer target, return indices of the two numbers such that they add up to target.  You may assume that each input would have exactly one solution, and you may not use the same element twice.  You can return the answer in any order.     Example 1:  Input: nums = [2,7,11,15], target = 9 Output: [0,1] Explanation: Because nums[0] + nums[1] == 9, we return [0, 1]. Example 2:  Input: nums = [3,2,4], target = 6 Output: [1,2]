1. Two Sum
Easy
54.2K
1.8K
Companies
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

hashing approach

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> sums;
        for(int i=0;i<nums.size();i++){
            int rem = target - nums[i];
            if(sums.find(rem)!=sums.end()){
                return {sums[rem], i};
            }
            if(sums.find(nums[i])==sums.end()){
                sums[nums[i]] = i;
            }
        }
        return {-1, -1};
    }
};

two pointers approach

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int right = nums.size()-1, left = 0;
        
        while(left<right){
            int sum = nums[right] + nums[left];
            if(sum==target){
                return {left, right};
            }
            else if(sum<target) left++;
            else right--;
        }
        return {-1,-1};
    }
};
