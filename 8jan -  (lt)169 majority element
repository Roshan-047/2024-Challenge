Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


using hashing
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int, int> ans;
        int n = 0;
        for(int i =0;i<nums.size();i++){
            ans[nums[i]]++;
        }
        for(auto it: ans){
            if(it.second >nums.size()/2) n = it.first;
        }
        
        return n;

    }
};

using moore's voting algorithm
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int element = 0;
        int count = 0;
        for(int i = 0;i<nums.size();i++){
            if(count == 0){
                element = nums[i];
                count++;
            }else if(nums[i]==element) count++;
            else count--;
        }
        return element;
    }
};
